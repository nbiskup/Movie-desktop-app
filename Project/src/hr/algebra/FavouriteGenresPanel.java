/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreTransferable;
import hr.algebra.model.User;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Nikola
 */
public class FavouriteGenresPanel extends javax.swing.JPanel {

    private List<Genre> allGenres = new ArrayList<>();
    private List<Genre> favGenres = new ArrayList<>();
    private final User user;
    
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> favGenresModel = new DefaultListModel<>();

    /**
     * Creates new form FavouriteGenresPanel
     */
    public FavouriteGenresPanel(User user) {
        this.user=user;
        try {
            initComponents();
            loadGenres();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(FavouriteGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lsFavGenres = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lsAllGenres = new javax.swing.JList<>();

        jLabel1.setText("Favourite genres");

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel2.setText("All genres");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(lsFavGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                .addComponent(lsAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
            .addGroup(layout.createSequentialGroup()
                .addGap(427, 427, 427)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lsAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lsFavGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addComponent(btnDelete)
                .addContainerGap(78, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedIndex = lsFavGenres.getSelectedIndex();
        Genre selectedValue = lsFavGenres.getSelectedValue();
        if (selectedIndex != -1) {
            try {
                favGenresModel.remove(selectedIndex);
                favGenres.remove(selectedValue);
                RepositoryFactory.getRepository().deleteUserGenre(user.getId(), selectedValue.getId());
                loadFavGenresModel();
            } catch (Exception ex) {
                Logger.getLogger(FavouriteGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            MessageUtils.showInformationMessage("Attention!", "Select a genre to remove");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Genre> lsFavGenres;
    // End of variables declaration//GEN-END:variables

private void loadGenres() throws Exception {
        favGenres = RepositoryFactory.getRepository().selectUserGenres(user.getId());
        allGenres = RepositoryFactory.getRepository().selectGenres();
        loadAllGenresModel();
        loadFavGenresModel();
    }

    private void initDragNDrop() {
        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new FavouriteGenresPanel.ExportTransferHandler());

        lsFavGenres.setDropMode(DropMode.ON);
        lsFavGenres.setTransferHandler(new FavouriteGenresPanel.ImportTransferHandler());
    }

    private void loadFavGenresModel() {
        favGenresModel.clear();
        favGenres.forEach(person -> favGenresModel.addElement(person));
        lsFavGenres.setModel(favGenresModel);
    }

    private void loadAllGenresModel() {
        allGenresModel.clear();
        allGenres.forEach(g -> allGenresModel.addElement(g));
        lsAllGenres.setModel(allGenresModel);
    }
    
    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }
    }
    
    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();

            try {
                Genre add = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (favGenres.add(add)) {
                    RepositoryFactory.getRepository().createUserGenre(user.getId(), add.getId());
                    loadFavGenresModel();
                    return true;
                }
            } catch (Exception ex) {
                Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }


}
